model:
  class: pymc_marketing.mmm.multidimensional.MMM
  kwargs:
    date_column: "date"
    channel_columns:
      - paidm_soc_fb_excl_cbpr2_imp
      - paidm_dsp_google_imp
      - paidm_search_generic_google_imp
      - paidm_search_brand_google_imp
      - paidm_dsp_ttd_imp
      - paidm_search_generic_apple_imp
      - paidm_search_brand_apple_imp
      - paidm_search_generic_bing_imp
      - paidm_search_brand_bing_imp
      - paidm_soc_tw_imp
      - paidm_soc_reddit_imp
      - paidm_soc_tiktok_imp
      - paidm_audio_weighted_imp
      - paidm_audio_podscribe_imp
      - paidm_tv_imp
    target_column: "kpi_registrations"
    dims: ["market"]
    scaling:
        target:
          method: "max"
          dims: []
        channel: 
          method: "max"
          dims: []

    # --- media transformations ---------------------------------------
    adstock:
      class: pymc_marketing.mmm.GeometricAdstock
      kwargs:
        l_max: 24
        priors:
          alpha:
            distribution: "Beta"
            alpha: 1.0
            beta: 3.0
            dims: ["market", "channel"]

    saturation:
      class: pymc_marketing.mmm.MichaelisMentenSaturation
      kwargs:
        priors:
          lam:
            distribution: "Gamma"
            mu: 5.0
            sigma: 2.0
            dims: ["market"]
          alpha:
            distribution: "Beta"
            alpha: 1.0
            beta: 2.0
            dims: ["market", "channel"]

    # --- model (hierarchical) priors ---------------------------------
    model_config:
      intercept:
        distribution: Gamma
        mu: 0.5
        sigma: 1.0
        dims: ["market"]

      likelihood:
        distribution: TruncatedNormal
        lower: 0
        sigma:
          distribution: "Gamma"
          mu: 1.0
          sigma: 0.5
          dims: ["market"]
        dims: ["date", "market"]
# ----------------------------------------------------------------------
# (optional) sampler options you plan to forward to pm.sample():
    sampler_config:
      tune: 500
      draws: 100
      chains: 1
      random_seed: 42
      target_accept: 0.92
      # nuts_sampler: "numpyro"
      # nuts_sampler_kwargs:
      #   backend: "jax"

# ----------------------------------------------------------------------
# Effects with complex priors
effects:
  # 1. Linear Trend Effect with complex nested priors
  - class: pymc_marketing.mmm.additive_effect.LinearTrendEffect
    kwargs:
      trend:
        class: pymc_marketing.mmm.LinearTrend
        kwargs:
          n_changepoints: 8
          include_intercept: false
          priors:
            delta:
              distribution: "Laplace"
              mu: 0
              b: 0.2
              dims: ["market", "changepoint"]
          dims: ["market", ]
      prefix: "trend"

  # 2. Fourier Effect with complex nested priors
  - class: pymc_marketing.mmm.additive_effect.FourierEffect
    kwargs:
      fourier:
        class: pymc_marketing.mmm.WeeklyFourier
        kwargs:
          n_order: 3
          prefix: "weekly_fourier"
          prior:
            distribution: "Laplace"
            mu: 0
            b: 0.1
            dims: ["weekly_fourier", "market"]

original_scale_vars:
  - y
  - channel_contribution
  - intercept_contribution
  - trend_effect_contribution

# ----------------------------------------------------------------------
# (optional) idata from a previous sample
# idata_path: "data/idata.nc"

# ----------------------------------------------------------------------
# (optional) Data paths
# data:
#   X_path: "data/X.csv"
#   y_path: "data/y.csv"